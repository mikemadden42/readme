# list docker version, info, images, containers
sudo docker version
sudo docker info

# search for & download images
sudo docker search ubuntu
sudo docker search centos
sudo docker search jenkins
sudo docker pull ubuntu:latest
sudo docker pull centos:latest
sudo docker pull jenkins:latest
# use tags when possible to ensure you get the expected release
sudo docker pull centos:6
sudo docker pull centos:7

# list running containers
sudo docker ps

# list last container
sudo docker ps -l

# list local images
sudo docker images

# run a non interactive container
sudo docker run ubuntu:latest cat /etc/os-release
sudo docker run centos:latest cat /etc/redhat-release

# run an interactive container
sudo docker run -t -i ubuntu:latest /bin/bash
sudo docker run -t -i centos:latest /bin/bash

# run an interactive container & give it a name
sudo docker run --name centos6_dev -t -i centos:6 /bin/bash
sudo docker run --name centos7_dev -t -i centos:7 /bin/bash

# list all containers
sudo docker ps -a
sudo docker ps -a -q

# list all images
sudo docker images 
sudo docker images centos
sudo docker images -q
sudo docker images -q | uniq

# start, attach, stop a container
sudo docker ps -a
sudo docker start f255c259d46d
sudo docker attach f255c259d46d
sudo docker stop f255c259d46d
sudo docker start centos6_dev
sudo docker attach centos6_dev
sudo docker stop centos6_dev

# get info for a container
sudo docker logs centos6_dev
sudo docker top centos6_dev
sudo docker stats centos6_dev
sudo docker inspect centos6_dev

# remove a single container
sudo docker rm f255c259d46d
sudo docker rm centos6_dev
# remove all containers
sudo docker rm $(sudo docker ps -a -q) 
# remove all containers & their volumes
sudo docker rm -v $(sudo docker ps -a -q) 

# remove a single image
sudo docker rm 2d24f826cb16
# remove all images
# make sure all containers are removed first
sudo docker rmi $(sudo docker images -q | uniq) 

# golang cross-complile an app
docker pull golang:latest
docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=windows -e GOARCH=386 golang:latest go build -v -o myapp-windows-386.exe
docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=windows -e GOARCH=amd64 golang:latest go build -v -o myapp-windows-amd64.exe
docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=darwin -e GOARCH=386 golang:latest go build -v -o myapp-darwin-386
docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=darwin -e GOARCH=amd64 golang:latest go build -v -o myapp-darwin-amd64
docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=linux -e GOARCH=386 golang:latest go build -v -o myapp-linux-386
docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=linux -e GOARCH=amd64 golang:latest go build -v -o myapp-linux-amd64

# list all orphaned volumes
docker volume ls -qf dangling=true
# eliminate all orphaned volumes 
docker volume rm $(docker volume ls -qf dangling=true)

# run jenkins & use a volume container
docker run --name myjenkins -p 8080:8080 -p 50000:50000 -v /var/jenkins_home jenkins
# run jenkins detached & use a volume container
docker run -d --name myjenkins -p 8080:8080 -p 50000:50000 -v /var/jenkins_home jenkins
