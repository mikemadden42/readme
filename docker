# list docker version, info, images, containers
sudo docker version
sudo docker info

# search for & download images
sudo docker search alpine
sudo docker search centos
sudo docker search ubuntu
sudo docker pull alpine:latest
sudo docker pull centos:latest
sudo docker pull ubuntu:latest
# use tags when possible to ensure you get the expected release
sudo docker pull alpine:3.5
sudo docker pull centos:6
sudo docker pull centos:7
sudo docker pull ubuntu:14.04
sudo docker pull ubuntu:16.04

# list running containers
sudo docker ps

# list last container
sudo docker ps -l

# list local images
sudo docker images

# run a non interactive container
sudo docker run centos:latest cat /etc/redhat-release
sudo docker run ubuntu:latest cat /etc/os-release

# run an interactive container
sudo docker run -i -t centos:latest /bin/bash
sudo docker run -i -t ubuntu:latest /bin/bash

# run an interactive container & remove it upon exit
sudo docker run -i -t -rm centos:latest /bin/bash
sudo docker run -i -t -rm ubuntu:latest /bin/bash

# run an interactive container & give it a name
sudo docker run --name alpine_dev -i -t alpine:3.5 /bin/sh
sudo docker run --name centos6_dev -i -t centos:6 /bin/bash
sudo docker run --name centos7_dev -i -t centos:7 /bin/bash

# run a daemonized container
sudo docker run --name daemon_dave -d ubuntu:16.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"

# list all containers
sudo docker ps -a
sudo docker ps -a -q

# list all images
sudo docker images
sudo docker images centos
sudo docker images -q
sudo docker images -q | uniq

# start, attach, stop a container
sudo docker ps -a
sudo docker start f255c259d46d
sudo docker attach f255c259d46d
sudo docker stop f255c259d46d
sudo docker start centos6_dev
sudo docker attach centos6_dev
sudo docker stop centos6_dev

# get info for a container
sudo docker logs centos6_dev
sudo docker logs -f centos6_dev
sudo docker logs -ft centos6_dev
sudo docker logs --tail 10 centos6_dev
sudo docker top centos6_dev
sudo docker stats centos6_dev
sudo docker inspect centos6_dev

# remove a single container
sudo docker rm f255c259d46d
sudo docker rm centos6_dev
# remove all containers
sudo docker rm $(sudo docker ps -a -q)
# remove all containers & their volumes
sudo docker rm -v $(sudo docker ps -a -q)

# remove a single image
sudo docker rm 2d24f826cb16
# remove all images
# make sure all containers are removed first
sudo docker rmi $(sudo docker images -q | uniq)

# golang cross-complile an app
sudo docker pull golang:latest
sudo docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=windows -e GOARCH=386 golang:latest go build -v -o myapp-windows-386.exe
sudo docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=windows -e GOARCH=amd64 golang:latest go build -v -o myapp-windows-amd64.exe
sudo docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=darwin -e GOARCH=386 golang:latest go build -v -o myapp-darwin-386
sudo docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=darwin -e GOARCH=amd64 golang:latest go build -v -o myapp-darwin-amd64
sudo docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=linux -e GOARCH=386 golang:latest go build -v -o myapp-linux-386
sudo docker run --rm -v "$PWD":/usr/src/myapp -w /usr/src/myapp -e GOOS=linux -e GOARCH=amd64 golang:latest go build -v -o myapp-linux-amd64

# list all orphaned volumes
sudo docker volume ls -qf dangling=true
# eliminate all orphaned volumes
sudo docker volume rm $(docker volume ls -qf dangling=true)

# manage disk space used by docker
docker system df
docker system prune
docker system prune -a
